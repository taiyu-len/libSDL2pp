CMAKE_MINIMUM_REQUIRED(VERSION 3.11)
PROJECT(libSDL2pp
	VERSION 0.16.0
	HOMEPAGE_URL https://github.com/libSDL2pp/libSDL2pp)

LIST(INSERT CMAKE_MODULE_PATH 0 ${PROJECT_SOURCE_DIR}/cmake)

# Configuration Options
OPTION(SDL2PP_WITH_IMAGE "Enable SDL2_image support" ON)
OPTION(SDL2PP_WITH_TTF "Enable SDL2_ttf support" ON)
OPTION(SDL2PP_WITH_MIXER "Enable SDL2_mixer support" ON)
OPTION(SDL2PP_WITH_EXAMPLES "Build examples" ON)
OPTION(SDL2PP_WITH_TESTS "Build tests" ON)
OPTION(SDL2PP_ENABLE_LIVE_TESTS "Enable live tests (require X11 display and audio device)" ON)
OPTION(SDL2PP_STATIC "Build static library instead of shared one" OFF)

FIND_PACKAGE(SDL2 REQUIRED)

# Create SDL2PP Target
IF(SDL2PP_STATIC)
	ADD_LIBRARY(SDL2pp STATIC)
ELSE(SDL2PP_STATIC)
	ADD_LIBRARY(SDL2pp SHARED)
ENDIF(SDL2PP_STATIC)

# config.hh
CONFIGURE_FILE(
	SDL2pp/Config.hh.in
	SDL2pp/Config.hh
)

TARGET_SOURCES(SDL2pp PRIVATE
	SDL2pp/AudioDevice.cc
	SDL2pp/AudioLock.cc
	SDL2pp/AudioSpec.cc
	SDL2pp/Color.cc
	SDL2pp/Exception.cc
	SDL2pp/Point.cc
	SDL2pp/RWops.cc
	SDL2pp/Rect.cc
	SDL2pp/Renderer.cc
	SDL2pp/SDL.cc
	SDL2pp/Surface.cc
	SDL2pp/SurfaceLock.cc
	SDL2pp/Texture.cc
	SDL2pp/TextureLock.cc
	SDL2pp/Wav.cc
	SDL2pp/Window.cc
)

TARGET_INCLUDE_DIRECTORIES(SDL2pp PUBLIC ${PROJECT_SOURCE_DIR})

SET_PROPERTY(TARGET SDL2pp PROPERTY PUBLIC_HEADER
	SDL2pp/AudioDevice.hh
	SDL2pp/AudioSpec.hh
	SDL2pp/Color.hh
	SDL2pp/Config.hh
	SDL2pp/ContainerRWops.hh
	SDL2pp/Exception.hh
	SDL2pp/Optional.hh
	SDL2pp/Point.hh
	SDL2pp/RWops.hh
	SDL2pp/Rect.hh
	SDL2pp/Renderer.hh
	SDL2pp/SDL.hh
	SDL2pp/SDL2pp.hh
	SDL2pp/StreamRWops.hh
	SDL2pp/Surface.hh
	SDL2pp/Texture.hh
	SDL2pp/Wav.hh
	SDL2pp/Window.hh
)

# Link SDL2
TARGET_LINK_LIBRARIES(SDL2pp PUBLIC SDL::SDL2)

# Conditionally add support for extra SDL2 features
IF(SDL2PP_WITH_TTF)
	TARGET_SOURCES(SDL2pp PRIVATE
		SDL2pp/SDLTTF.cc
		SDL2pp/Font.cc
	)
	SET_PROPERTY(TARGET SDL2pp APPEND PROPERTY PUBLIC_HEADER
		SDL2pp/SDLTTF.hh
		SDL2pp/Font.hh
	)
	FIND_PACKAGE(SDL2_ttf REQUIRED)
	TARGET_LINK_LIBRARIES(SDL2pp PUBLIC SDL::SDL2_ttf)
ENDIF(SDL2PP_WITH_TTF)

IF(SDL2PP_WITH_IMAGE)
	TARGET_SOURCES(SDL2pp PRIVATE
		SDL2pp/SDLImage.cc
	)
	SET_PROPERTY(TARGET SDL2pp APPEND PROPERTY PUBLIC_HEADER
		SDL2pp/SDLImage.hh
	)
	FIND_PACKAGE(SDL2_image REQUIRED)
	TARGET_LINK_LIBRARIES(SDL2pp PUBLIC SDL::SDL2_image)
ENDIF(SDL2PP_WITH_IMAGE)

IF(SDL2PP_WITH_MIXER)
	TARGET_SOURCES(SDL2pp PRIVATE
		SDL2pp/Chunk.cc
		SDL2pp/Mixer.cc
		SDL2pp/Music.cc
		SDL2pp/SDLMixer.cc
	)
	SET_PROPERTY(TARGET SDL2pp APPEND PROPERTY PUBLIC_HEADER
		SDL2pp/Chunk.hh
		SDL2pp/Mixer.hh
		SDL2pp/Music.hh
		SDL2pp/SDLMixer.hh
	)
	FIND_PACKAGE(SDL2_mixer REQUIRED)
	TARGET_LINK_LIBRARIES(SDL2pp PUBLIC SDL::SDL2_mixer)
ENDIF(SDL2PP_WITH_MIXER)

# Examples
IF(SDL2PP_WITH_EXAMPLES)
	ADD_SUBDIRECTORY(examples)
ENDIF(SDL2PP_WITH_EXAMPLES)

# Install
INSTALL(TARGETS SDL2pp RUNTIME ARCHIVE LIBRARY PUBLIC_HEADER)

# Resources
SET(CMAKEMODDIR share/cmake/Modules CACHE STRING "directory where to install cmake module")
SET(PKGCONFIGDIR lib/pkgconfig CACHE STRING "directory where to install pkg-config files")
INSTALL(FILES ${PROJECT_BINARY_DIR}/sdl2pp.pc DESTINATION ${PKGCONFIGDIR})
INSTALL(FILES ${PROJECT_BINARY_DIR}/FindSDL2PP.cmake DESTINATION ${CMAKEMODDIR})
